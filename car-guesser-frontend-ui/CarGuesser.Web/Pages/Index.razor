@page "/"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<AuthModal @bind-IsVisible="showAuthModal"/>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
<div class="index-container">
    <div class="hero-section">
        <h1 class="welcome-title">Угадай автомобиль</h1>
        <p class="subtitle">ИИ поможет определить машину по вашим ответам</p>
    </div>

    @if (isLoading)
    {
        <div class="spinner"></div>
        <p class="loading-text">Загрузка...</p>
    }
    else if (!string.IsNullOrEmpty(apiError))
    {
        <div class="error-message">
            <p class="error-text">Ошибка: @apiError</p>
        </div>
    }
    else
    {
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-value">@totalGames</div>
                <div class="stat-label">Всего игр</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">@successRate%</div>
                <div class="stat-label">Угадано</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">@activePlayers</div>
                <div class="stat-label">Игроков</div>
            </div>
        </div>

        <button @onclick="StartGame" class="start-btn">
            <span class="btn-icon">🚗</span>
            Начать игру
        </button>
    }
</div>

<style>
    :root {
        --primary-color: #ffffff; /* Light background for clarity */
        --text-color: #333333; /* Dark text for readability */
        --accent-color: #007bff; /* Standard blue for buttons, consistent with typical web apps */
        --error-color: #dc3545; /* Standard red for errors */
        --shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    }

    .index-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        background-color: var(--primary-color);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        color: var(--text-color);
        padding: 20px;
        text-align: center;
    }

    .welcome-title {
        font-size: 2.5rem;
        font-weight: 600;
        margin-bottom: 2rem;
        color: var(--text-color);
    }

    .start-btn {
        background-color: var(--accent-color);
        color: white;
        border: none;
        padding: 15px 30px;
        font-size: 1.2rem;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        box-shadow: var(--shadow);
    }

    .start-btn:hover {
        background-color: #0056b3; /* Darker blue on hover */
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #ccc;
        border-top: 4px solid var(--accent-color);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 20px auto;
    }

    @@keyframes spin {
        from {
            transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }

    .loading-text {
        font-size: 1.1rem;
        color: var(--text-color);
        margin-top: 10px;
    }

    .error-message {
        background-color: rgba(220, 53, 69, 0.1); /* Light red background */
        color: var(--error-color);
        padding: 15px;
        border-radius: 8px;
        margin-top: 20px;
        border: 1px solid var(--error-color);
    }

    .error-text {
        font-size: 1rem;
        margin: 0;
    }
</style>

@code {
    private HttpClient Http => HttpClientFactory.CreateClient("BackendApi");
    private bool isLoading;
    private string apiError = "";
    private bool showAuthModal;

    // Статистика (заглушка)
    private int totalGames = 1242;
    private int successRate = 83;
    private int activePlayers = 356;

    protected override async Task OnInitializedAsync()
    {
        // Добавлено для устранения предупреждения
        await Task.CompletedTask;

        // Загрузка реальной статистики с бэкенда
        // await LoadStats();
    }

    private async Task StartGame()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Исправленная проверка на null
        if (user.Identity?.IsAuthenticated != true)
        {
            showAuthModal = true;
            return;
        }

        isLoading = true;
        apiError = "";

        try
        {
            var sessionId = Guid.NewGuid().ToString();
            var response = await Http.GetAsync($"beckend/start?sessionId={sessionId}");

            if (!response.IsSuccessStatusCode)
            {
                apiError = $"Ошибка: {response.StatusCode}";
                isLoading = false;
                return;
            }

            var responseBody = await response.Content.ReadAsStringAsync();
            Navigation.NavigateTo($"/game?sessionId={sessionId}&firstQuestion={Uri.EscapeDataString(responseBody)}");
        }
        catch (Exception ex)
        {
            apiError = $"Ошибка: {ex.Message}";
            isLoading = false;
        }
    }

}